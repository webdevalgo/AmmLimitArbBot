/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "setFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setOwner(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "collectFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAlgoSellOrder(pay,application,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAlgoBuyOrder(application,uint256,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fillAlgoToArc200Order(uint64,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fillArc200ToAlgoOrder(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cancelOrder(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "fee": {
          "type": "uint64",
          "key": "fee"
        },
        "feeAccumulated": {
          "type": "uint64",
          "key": "fee_acc"
        },
        "orderCounter": {
          "type": "uint64",
          "key": "order_counter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "LimitOrders001",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFee",
        "args": [
          {
            "name": "ownerFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setOwner",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "collectFee",
        "args": [
          {
            "name": "algoAmount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createAlgoSellOrder",
        "args": [
          {
            "name": "algoPayTxn",
            "type": "pay"
          },
          {
            "name": "arc200Id",
            "type": "application"
          },
          {
            "name": "arc200Amount",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PlaceOrder",
            "args": [
              {
                "name": "orderId",
                "type": "uint64"
              },
              {
                "name": "maker",
                "type": "address"
              },
              {
                "name": "algoAmount",
                "type": "uint64"
              },
              {
                "name": "arc200Amount",
                "type": "uint256"
              },
              {
                "name": "orderDirection",
                "type": "uint8"
              }
            ],
            "desc": "**********************************************"
          }
        ]
      },
      {
        "name": "createAlgoBuyOrder",
        "args": [
          {
            "name": "arc200AppId",
            "type": "application"
          },
          {
            "name": "arc200Amount",
            "type": "uint256"
          },
          {
            "name": "algoAmount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PlaceOrder",
            "args": [
              {
                "name": "orderId",
                "type": "uint64"
              },
              {
                "name": "maker",
                "type": "address"
              },
              {
                "name": "algoAmount",
                "type": "uint64"
              },
              {
                "name": "arc200Amount",
                "type": "uint256"
              },
              {
                "name": "orderDirection",
                "type": "uint8"
              }
            ],
            "desc": "**********************************************"
          }
        ]
      },
      {
        "name": "fillAlgoToArc200Order",
        "args": [
          {
            "name": "orderId",
            "type": "uint64"
          },
          {
            "name": "arc200Amount",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "FillOrder",
            "args": [
              {
                "name": "orderId",
                "type": "uint64"
              },
              {
                "name": "maker",
                "type": "address"
              },
              {
                "name": "taker",
                "type": "address"
              },
              {
                "name": "filledAlgoAmount",
                "type": "uint64"
              },
              {
                "name": "filledArc200Amount",
                "type": "uint256"
              },
              {
                "name": "orderDirection",
                "type": "uint8"
              },
              {
                "name": "fee",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "fillArc200ToAlgoOrder",
        "args": [
          {
            "name": "orderId",
            "type": "uint64"
          },
          {
            "name": "algoPayTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "FillOrder",
            "args": [
              {
                "name": "orderId",
                "type": "uint64"
              },
              {
                "name": "maker",
                "type": "address"
              },
              {
                "name": "taker",
                "type": "address"
              },
              {
                "name": "filledAlgoAmount",
                "type": "uint64"
              },
              {
                "name": "filledArc200Amount",
                "type": "uint256"
              },
              {
                "name": "orderDirection",
                "type": "uint8"
              },
              {
                "name": "fee",
                "type": "uint256"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "cancelOrder",
        "args": [
          {
            "name": "orderId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "CancelOrder",
            "args": [
              {
                "name": "orderId",
                "type": "uint64"
              },
              {
                "name": "maker",
                "type": "address"
              },
              {
                "name": "returnedAmount",
                "type": "uint256"
              },
              {
                "name": "orderDirection",
                "type": "uint8"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "registerOnline",
        "args": [
          {
            "name": "selection_pk",
            "type": "byte[]"
          },
          {
            "name": "state_proof_pk",
            "type": "byte[]"
          },
          {
            "name": "vote_pk",
            "type": "byte[]"
          },
          {
            "name": "vote_first",
            "type": "uint64"
          },
          {
            "name": "vote_last",
            "type": "uint64"
          },
          {
            "name": "vote_key_dilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "PlaceOrder",
        "args": [
          {
            "name": "orderId",
            "type": "uint64"
          },
          {
            "name": "maker",
            "type": "address"
          },
          {
            "name": "algoAmount",
            "type": "uint64"
          },
          {
            "name": "arc200Amount",
            "type": "uint256"
          },
          {
            "name": "orderDirection",
            "type": "uint8"
          }
        ],
        "desc": "**********************************************"
      },
      {
        "name": "FillOrder",
        "args": [
          {
            "name": "orderId",
            "type": "uint64"
          },
          {
            "name": "maker",
            "type": "address"
          },
          {
            "name": "taker",
            "type": "address"
          },
          {
            "name": "filledAlgoAmount",
            "type": "uint64"
          },
          {
            "name": "filledArc200Amount",
            "type": "uint256"
          },
          {
            "name": "orderDirection",
            "type": "uint8"
          },
          {
            "name": "fee",
            "type": "uint256"
          }
        ],
        "desc": ""
      },
      {
        "name": "CancelOrder",
        "args": [
          {
            "name": "orderId",
            "type": "uint64"
          },
          {
            "name": "maker",
            "type": "address"
          },
          {
            "name": "returnedAmount",
            "type": "uint256"
          },
          {
            "name": "orderDirection",
            "type": "uint8"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the LimitOrders001 smart contract.
 */
export type LimitOrders001 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,uint64)void' | 'createApplication', {
      argsObj: {
        owner: string
        fee: bigint | number
      }
      argsTuple: [owner: string, fee: bigint | number]
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setFee(uint64)void' | 'setFee', {
      argsObj: {
        ownerFee: bigint | number
      }
      argsTuple: [ownerFee: bigint | number]
      returns: void
    }>
    & Record<'setOwner(address)void' | 'setOwner', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'collectFee(uint64)void' | 'collectFee', {
      argsObj: {
        algoAmount: bigint | number
      }
      argsTuple: [algoAmount: bigint | number]
      returns: void
    }>
    & Record<'createAlgoSellOrder(pay,application,uint256)void' | 'createAlgoSellOrder', {
      argsObj: {
        algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        arc200Id: number | bigint
        arc200Amount: bigint | number
      }
      argsTuple: [algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, arc200Id: number | bigint, arc200Amount: bigint | number]
      returns: void
    }>
    & Record<'createAlgoBuyOrder(application,uint256,uint64)void' | 'createAlgoBuyOrder', {
      argsObj: {
        arc200AppId: number | bigint
        arc200Amount: bigint | number
        algoAmount: bigint | number
      }
      argsTuple: [arc200AppId: number | bigint, arc200Amount: bigint | number, algoAmount: bigint | number]
      returns: void
    }>
    & Record<'fillAlgoToArc200Order(uint64,uint256)void' | 'fillAlgoToArc200Order', {
      argsObj: {
        orderId: bigint | number
        arc200Amount: bigint | number
      }
      argsTuple: [orderId: bigint | number, arc200Amount: bigint | number]
      returns: void
    }>
    & Record<'fillArc200ToAlgoOrder(uint64,pay)void' | 'fillArc200ToAlgoOrder', {
      argsObj: {
        orderId: bigint | number
        algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [orderId: bigint | number, algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'cancelOrder(uint64)void' | 'cancelOrder', {
      argsObj: {
        orderId: bigint | number
      }
      argsTuple: [orderId: bigint | number]
      returns: void
    }>
    & Record<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'registerOnline', {
      argsObj: {
        selection_pk: Uint8Array
        state_proof_pk: Uint8Array
        vote_pk: Uint8Array
        vote_first: bigint | number
        vote_last: bigint | number
        vote_key_dilution: bigint | number
      }
      argsTuple: [selection_pk: Uint8Array, state_proof_pk: Uint8Array, vote_pk: Uint8Array, vote_first: bigint | number, vote_last: bigint | number, vote_key_dilution: bigint | number]
      returns: void
    }>
    & Record<'registerOffline()void' | 'registerOffline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'owner'?: BinaryState
      'fee'?: IntegerState
      'fee_acc'?: IntegerState
      'order_counter'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type LimitOrders001Sig = keyof LimitOrders001['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LimitOrders001Sig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the LimitOrders001 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LimitOrders001Sig> = LimitOrders001['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LimitOrders001 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LimitOrders001Sig> = LimitOrders001['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type LimitOrders001CreateCalls = (typeof LimitOrders001CallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type LimitOrders001CreateCallParams =
  | (TypedCallParams<'createApplication(address,uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type LimitOrders001UpdateCalls = (typeof LimitOrders001CallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type LimitOrders001UpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type LimitOrders001DeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: LimitOrders001CreateCalls) => LimitOrders001CreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: LimitOrders001UpdateCalls) => LimitOrders001UpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LimitOrders001CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the LimitOrders001 smart contract using the createApplication(address,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.owner, args.fee],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the LimitOrders001 smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setFee(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFee(args: MethodArgs<'setFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFee(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.ownerFee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setOwner(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setOwner(args: MethodArgs<'setOwner(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setOwner(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the collectFee(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static collectFee(args: MethodArgs<'collectFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'collectFee(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.algoAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAlgoSellOrder(pay,application,uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAlgoSellOrder(args: MethodArgs<'createAlgoSellOrder(pay,application,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAlgoSellOrder(pay,application,uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.algoPayTxn, args.arc200Id, args.arc200Amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAlgoBuyOrder(application,uint256,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAlgoBuyOrder(args: MethodArgs<'createAlgoBuyOrder(application,uint256,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAlgoBuyOrder(application,uint256,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.arc200AppId, args.arc200Amount, args.algoAmount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fillAlgoToArc200Order(uint64,uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fillAlgoToArc200Order(args: MethodArgs<'fillAlgoToArc200Order(uint64,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fillAlgoToArc200Order(uint64,uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId, args.arc200Amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fillArc200ToAlgoOrder(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fillArc200ToAlgoOrder(args: MethodArgs<'fillArc200ToAlgoOrder(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fillArc200ToAlgoOrder(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId, args.algoPayTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cancelOrder(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cancelOrder(args: MethodArgs<'cancelOrder(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cancelOrder(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.orderId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.selection_pk, args.state_proof_pk, args.vote_pk, args.vote_first, args.vote_last, args.vote_key_dilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerOffline()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerOffline(args: MethodArgs<'registerOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerOffline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the LimitOrders001 smart contract
 */
export class LimitOrders001Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `LimitOrders001Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof LimitOrders001['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the LimitOrders001 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: LimitOrders001DeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(LimitOrders001CallFactory.create)
    const updateArgs = params.updateCall?.(LimitOrders001CallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the LimitOrders001 smart contract using the createApplication(address,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address,uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(LimitOrders001CallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the LimitOrders001 smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'updateApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.update(LimitOrders001CallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the LimitOrders001 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFee(args: MethodArgs<'setFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.setFee(args, params))
  }

  /**
   * Calls the setOwner(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setOwner(args: MethodArgs<'setOwner(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.setOwner(args, params))
  }

  /**
   * Calls the collectFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public collectFee(args: MethodArgs<'collectFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.collectFee(args, params))
  }

  /**
   * Calls the createAlgoSellOrder(pay,application,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAlgoSellOrder(args: MethodArgs<'createAlgoSellOrder(pay,application,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.createAlgoSellOrder(args, params))
  }

  /**
   * Calls the createAlgoBuyOrder(application,uint256,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAlgoBuyOrder(args: MethodArgs<'createAlgoBuyOrder(application,uint256,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.createAlgoBuyOrder(args, params))
  }

  /**
   * Calls the fillAlgoToArc200Order(uint64,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fillAlgoToArc200Order(args: MethodArgs<'fillAlgoToArc200Order(uint64,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.fillAlgoToArc200Order(args, params))
  }

  /**
   * Calls the fillArc200ToAlgoOrder(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fillArc200ToAlgoOrder(args: MethodArgs<'fillArc200ToAlgoOrder(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.fillArc200ToAlgoOrder(args, params))
  }

  /**
   * Calls the cancelOrder(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cancelOrder(args: MethodArgs<'cancelOrder(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.cancelOrder(args, params))
  }

  /**
   * Calls the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.registerOnline(args, params))
  }

  /**
   * Calls the registerOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerOffline(args: MethodArgs<'registerOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(LimitOrders001CallFactory.registerOffline(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<LimitOrders001['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get owner() {
        return LimitOrders001Client.getBinaryState(state, 'owner')
      },
      get fee() {
        return LimitOrders001Client.getIntegerState(state, 'fee')
      },
      get fee_acc() {
        return LimitOrders001Client.getIntegerState(state, 'fee_acc')
      },
      get order_counter() {
        return LimitOrders001Client.getIntegerState(state, 'order_counter')
      },
    }
  }

  public compose(): LimitOrders001Composer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setFee(args: MethodArgs<'setFee(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setOwner(args: MethodArgs<'setOwner(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      collectFee(args: MethodArgs<'collectFee(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.collectFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAlgoSellOrder(args: MethodArgs<'createAlgoSellOrder(pay,application,uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAlgoSellOrder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAlgoBuyOrder(args: MethodArgs<'createAlgoBuyOrder(application,uint256,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAlgoBuyOrder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fillAlgoToArc200Order(args: MethodArgs<'fillAlgoToArc200Order(uint64,uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fillAlgoToArc200Order(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fillArc200ToAlgoOrder(args: MethodArgs<'fillArc200ToAlgoOrder(uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fillArc200ToAlgoOrder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cancelOrder(args: MethodArgs<'cancelOrder(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cancelOrder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerOffline(args: MethodArgs<'registerOffline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as LimitOrders001Composer
  }
}
export type LimitOrders001Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFee(args: MethodArgs<'setFee(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'setFee(uint64)void'>]>

  /**
   * Calls the setOwner(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setOwner(args: MethodArgs<'setOwner(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'setOwner(address)void'>]>

  /**
   * Calls the collectFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  collectFee(args: MethodArgs<'collectFee(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'collectFee(uint64)void'>]>

  /**
   * Calls the createAlgoSellOrder(pay,application,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAlgoSellOrder(args: MethodArgs<'createAlgoSellOrder(pay,application,uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'createAlgoSellOrder(pay,application,uint256)void'>]>

  /**
   * Calls the createAlgoBuyOrder(application,uint256,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAlgoBuyOrder(args: MethodArgs<'createAlgoBuyOrder(application,uint256,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'createAlgoBuyOrder(application,uint256,uint64)void'>]>

  /**
   * Calls the fillAlgoToArc200Order(uint64,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fillAlgoToArc200Order(args: MethodArgs<'fillAlgoToArc200Order(uint64,uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'fillAlgoToArc200Order(uint64,uint256)void'>]>

  /**
   * Calls the fillArc200ToAlgoOrder(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fillArc200ToAlgoOrder(args: MethodArgs<'fillArc200ToAlgoOrder(uint64,pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'fillArc200ToAlgoOrder(uint64,pay)void'>]>

  /**
   * Calls the cancelOrder(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelOrder(args: MethodArgs<'cancelOrder(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'cancelOrder(uint64)void'>]>

  /**
   * Calls the registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOnline(args: MethodArgs<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the registerOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerOffline(args: MethodArgs<'registerOffline()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, MethodReturn<'registerOffline()void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the LimitOrders001 smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientCallCoreParams & AppClientCompilationParams): LimitOrders001Composer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the LimitOrders001 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): LimitOrders001Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): LimitOrders001Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LimitOrders001ComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<LimitOrders001ComposerResults<TReturns>>
}
export type LimitOrders001ComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type LimitOrders001ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
